/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, BytesLike, BigNumberish, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MembershipsProxy, MembershipsProxyInterface } from "../MembershipsProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_membershipsVersion",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "_memberships",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidMemberships",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "memberships",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "membershipsFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_memberships",
        type: "address",
      },
    ],
    name: "upgradeMemberships",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000b8138038062000b8183398101604081905262000034916200049e565b818162000044828260006200017f565b5062000074905060017f1ad0e7da7a8ae5b58d3a6900c5b9701c3c2713e4e7cef4d5a30267fc422c630262000586565b7f1ad0e7da7a8ae5b58d3a6900c5b9701c3c2713e4e7cef4d5a30267fc422c630114620000a557620000a5620005ac565b60405163243a7dfb60e11b815261ffff841660048201526001600160a01b038316903390634874fbf69060240160206040518083038186803b158015620000eb57600080fd5b505afa15801562000100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001269190620005c2565b6001600160a01b0316146200014d5760405162f55bf760e71b815260040160405180910390fd5b62000176337f1ad0e7da7a8ae5b58d3a6900c5b9701c3c2713e4e7cef4d5a30267fc422c630155565b50505062000633565b6200018a83620001bc565b600082511180620001985750805b15620001b757620001b58383620001fe60201b6200015e1760201c565b505b505050565b620001c7816200022d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606062000226838360405180606001604052806027815260200162000b5a6027913962000306565b9392505050565b6200024381620003ec60201b6200018a1760201c565b620002ab5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b80620002e57f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003fb60201b620001991760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606001600160a01b0384163b620003705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620002a2565b600080856001600160a01b0316856040516200038d9190620005e0565b600060405180830381855af49150503d8060008114620003ca576040519150601f19603f3d011682016040523d82523d6000602084013e620003cf565b606091505b509092509050620003e2828286620003fe565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156200040f57508162000226565b825115620004205782518084602001fd5b8160405162461bcd60e51b8152600401620002a29190620005fe565b80516001600160a01b03811681146200045457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200048c57818101518382015260200162000472565b83811115620001b55750506000910152565b600080600060608486031215620004b457600080fd5b835161ffff81168114620004c757600080fd5b9250620004d7602085016200043c565b60408501519092506001600160401b0380821115620004f557600080fd5b818601915086601f8301126200050a57600080fd5b8151818111156200051f576200051f62000459565b604051601f8201601f19908116603f011681019083821181831017156200054a576200054a62000459565b816040528281528960208487010111156200056457600080fd5b620005778360208301602088016200046f565b80955050505050509250925092565b600082821015620005a757634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b600060208284031215620005d557600080fd5b62000226826200043c565b60008251620005f48184602087016200046f565b9190910192915050565b60208152600082518060208401526200061f8160408501602087016200046f565b601f01601f19169190910160400192915050565b61051780620006436000396000f3fe6080604052600436106100385760003560e01c80632ba0fd071461004f578063b5c7af9814610080578063b88fe6a3146100a057610047565b36610047576100456100b5565b005b6100456100b5565b34801561005b57600080fd5b506100646100c7565b6040516001600160a01b03909116815260200160405180910390f35b34801561008c57600080fd5b5061004561009b36600461043b565b6100f6565b3480156100ac57600080fd5b50610064610154565b6100c56100c061019c565b6101cf565b565b60006100f17f1ad0e7da7a8ae5b58d3a6900c5b9701c3c2713e4e7cef4d5a30267fc422c63015490565b905090565b7f1ad0e7da7a8ae5b58d3a6900c5b9701c3c2713e4e7cef4d5a30267fc422c6301546001600160a01b0316336001600160a01b031614610148576040516282b42960e81b815260040160405180910390fd5b610151816101f3565b50565b60006100f161019c565b606061018383836040518060600160405280602781526020016104e460279139610233565b9392505050565b6001600160a01b03163b151590565b90565b60006100f17f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b3660008037600080366000845af43d6000803e8080156101ee573d6000f35b3d6000fd5b6101fc8161032c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0384163b6102b75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600080856001600160a01b0316856040516102d29190610494565b600060405180830381855af49150503d806000811461030d576040519150601f19603f3d011682016040523d82523d6000602084013e610312565b606091505b5091509150610322828286610402565b9695505050505050565b6001600160a01b0381163b6103a95760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016102ae565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60608315610411575081610183565b8251156104215782518084602001fd5b8160405162461bcd60e51b81526004016102ae91906104b0565b60006020828403121561044d57600080fd5b81356001600160a01b038116811461018357600080fd5b60005b8381101561047f578181015183820152602001610467565b8381111561048e576000848401525b50505050565b600082516104a6818460208701610464565b9190910192915050565b60208152600082518060208401526104cf816040850160208701610464565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000809000a416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564";

type MembershipsProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MembershipsProxyConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MembershipsProxy__factory extends ContractFactory {
  constructor(...args: MembershipsProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _membershipsVersion: BigNumberish,
    _memberships: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MembershipsProxy> {
    return super.deploy(_membershipsVersion, _memberships, _data, overrides || {}) as Promise<MembershipsProxy>;
  }
  getDeployTransaction(
    _membershipsVersion: BigNumberish,
    _memberships: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_membershipsVersion, _memberships, _data, overrides || {});
  }
  attach(address: string): MembershipsProxy {
    return super.attach(address) as MembershipsProxy;
  }
  connect(signer: Signer): MembershipsProxy__factory {
    return super.connect(signer) as MembershipsProxy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MembershipsProxyInterface {
    return new utils.Interface(_abi) as MembershipsProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MembershipsProxy {
    return new Contract(address, _abi, signerOrProvider) as MembershipsProxy;
  }
}
