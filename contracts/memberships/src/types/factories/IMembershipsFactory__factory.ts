/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IMembershipsFactory, IMembershipsFactoryInterface } from "../IMembershipsFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_treasury",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "contractURI_",
        type: "string",
      },
      {
        internalType: "string",
        name: "baseURI_",
        type: "string",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "validity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cap",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "airdropToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "airdropAmount",
            type: "uint256",
          },
        ],
        internalType: "struct IMemberships.Membership",
        name: "_membership",
        type: "tuple",
      },
    ],
    name: "deployMemberships",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_version",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_treasury",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "contractURI_",
        type: "string",
      },
      {
        internalType: "string",
        name: "baseURI_",
        type: "string",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "validity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cap",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "airdropToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "airdropAmount",
            type: "uint256",
          },
        ],
        internalType: "struct IMemberships.Membership",
        name: "_membership",
        type: "tuple",
      },
    ],
    name: "deployMembershipsAtVersion",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "feeBPS",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeTreasury",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "version",
        type: "uint16",
      },
    ],
    name: "membershipsImpls",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "membershipsLatestVersion",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_feeBPS",
        type: "uint16",
      },
    ],
    name: "setFeeBPS",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_feeTreasury",
        type: "address",
      },
    ],
    name: "setFeeTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_version",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "_memberships",
        type: "address",
      },
    ],
    name: "setMembershipsImplAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_version",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "_membershipsProxy",
        type: "address",
      },
    ],
    name: "upgradeProxy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IMembershipsFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IMembershipsFactoryInterface {
    return new utils.Interface(_abi) as IMembershipsFactoryInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IMembershipsFactory {
    return new Contract(address, _abi, signerOrProvider) as IMembershipsFactory;
  }
}
