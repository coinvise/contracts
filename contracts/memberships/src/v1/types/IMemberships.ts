/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IMemberships {
  export type MembershipStruct = {
    tokenAddress: string;
    price: BigNumberish;
    validity: BigNumberish;
    cap: BigNumberish;
    airdropToken: string;
    airdropAmount: BigNumberish;
  };

  export type MembershipStructOutput = [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
    tokenAddress: string;
    price: BigNumber;
    validity: BigNumber;
    cap: BigNumber;
    airdropToken: string;
    airdropAmount: BigNumber;
  };
}

export interface IMembershipsInterface extends utils.Interface {
  contractName: "IMemberships";
  functions: {
    "airdropAmount()": FunctionFragment;
    "airdropToken()": FunctionFragment;
    "cap()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "expirationTimestampOf(uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "hasValidToken(address)": FunctionFragment;
    "initialize(address,address,string,string,string,string,(address,uint256,uint256,uint256,address,uint256))": FunctionFragment;
    "isValid(uint256)": FunctionFragment;
    "mint(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "price()": FunctionFragment;
    "purchase(address)": FunctionFragment;
    "renew(uint256)": FunctionFragment;
    "setDefaultRoyalty(address,uint96)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpause()": FunctionFragment;
    "validity()": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "airdropAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "airdropToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(functionFragment: "contractURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "expirationTimestampOf", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "hasValidToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, IMemberships.MembershipStruct],
  ): string;
  encodeFunctionData(functionFragment: "isValid", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(functionFragment: "purchase", values: [string]): string;
  encodeFunctionData(functionFragment: "renew", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setDefaultRoyalty", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "validity", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "airdropAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airdropToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contractURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expirationTimestampOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasValidToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isValid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDefaultRoyalty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface IMemberships extends BaseContract {
  contractName: "IMemberships";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMembershipsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    airdropAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    airdropToken(overrides?: CallOverrides): Promise<[string]>;

    cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    expirationTimestampOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    hasValidToken(_owner: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _owner: string,
      _treasury: string,
      _name: string,
      _symbol: string,
      contractURI_: string,
      baseURI_: string,
      _membership: IMemberships.MembershipStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isValid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    mint(recipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchase(
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renew(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDefaultRoyalty(
      _receiver: string,
      _feeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    validity(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[number]>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  airdropAmount(overrides?: CallOverrides): Promise<BigNumber>;

  airdropToken(overrides?: CallOverrides): Promise<string>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  expirationTimestampOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  hasValidToken(_owner: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _owner: string,
    _treasury: string,
    _name: string,
    _symbol: string,
    contractURI_: string,
    baseURI_: string,
    _membership: IMemberships.MembershipStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isValid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  mint(recipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  purchase(
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renew(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDefaultRoyalty(
    _receiver: string,
    _feeNumerator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  validity(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<number>;

  withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    airdropAmount(overrides?: CallOverrides): Promise<BigNumber>;

    airdropToken(overrides?: CallOverrides): Promise<string>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    expirationTimestampOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    hasValidToken(_owner: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _owner: string,
      _treasury: string,
      _name: string,
      _symbol: string,
      contractURI_: string,
      baseURI_: string,
      _membership: IMemberships.MembershipStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    isValid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    mint(recipient: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(recipient: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    renew(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setDefaultRoyalty(_receiver: string, _feeNumerator: BigNumberish, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    validity(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<number>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    airdropAmount(overrides?: CallOverrides): Promise<BigNumber>;

    airdropToken(overrides?: CallOverrides): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    expirationTimestampOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    hasValidToken(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _treasury: string,
      _name: string,
      _symbol: string,
      contractURI_: string,
      baseURI_: string,
      _membership: IMemberships.MembershipStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isValid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    mint(recipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(recipient: string, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renew(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDefaultRoyalty(
      _receiver: string,
      _feeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    validity(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    airdropAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airdropToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expirationTimestampOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasValidToken(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _treasury: string,
      _name: string,
      _symbol: string,
      contractURI_: string,
      baseURI_: string,
      _membership: IMemberships.MembershipStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isValid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(recipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renew(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDefaultRoyalty(
      _receiver: string,
      _feeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    validity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
