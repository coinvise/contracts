/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CampaignsNativeGaslessClaimInterface extends utils.Interface {
  functions: {
    "campaigns(address,uint256)": FunctionFragment;
    "claim(address,uint256,bytes32,bytes32,uint8,address)": FunctionFragment;
    "claimFee()": FunctionFragment;
    "createCampaign(address,uint256,uint256,uint8,uint256)": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "hasClaimed(bytes32)": FunctionFragment;
    "increaseMaxSponsoredClaims(address,uint256,uint256)": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolRewards()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setClaimFee(uint256)": FunctionFragment;
    "setSponsoredClaimFee(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setTrustedAddress(address)": FunctionFragment;
    "splitAndDepositRewards(uint256,address,address,address)": FunctionFragment;
    "splitRewards(uint256,address,address,address)": FunctionFragment;
    "sponsoredClaimFee()": FunctionFragment;
    "totalClaimFees()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "withdrawCampaign(uint256)": FunctionFragment;
    "withdrawTotalClaimFees(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "campaigns"
      | "claim"
      | "claimFee"
      | "createCampaign"
      | "eip712Domain"
      | "executeMetaTransaction"
      | "getNonce"
      | "hasClaimed"
      | "increaseMaxSponsoredClaims"
      | "initialize"
      | "owner"
      | "protocolRewards"
      | "renounceOwnership"
      | "setClaimFee"
      | "setSponsoredClaimFee"
      | "setTreasury"
      | "setTrustedAddress"
      | "splitAndDepositRewards"
      | "splitRewards"
      | "sponsoredClaimFee"
      | "totalClaimFees"
      | "transferOwnership"
      | "treasury"
      | "withdrawCampaign"
      | "withdrawTotalClaimFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "campaigns",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "claimFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseMaxSponsoredClaims",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSponsoredClaimFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "splitAndDepositRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "splitRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsoredClaimFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCampaign",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTotalClaimFees",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseMaxSponsoredClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSponsoredClaimFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitAndDepositRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsoredClaimFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTotalClaimFees",
    data: BytesLike
  ): Result;

  events: {
    "CampaignClaimed(address,uint256,address,address,uint256)": EventFragment;
    "CampaignCreated(address,uint256)": EventFragment;
    "CampaignWithdrawn(address,uint256)": EventFragment;
    "ClaimFeePaid(uint256,address,address,address,uint256,address)": EventFragment;
    "EIP712DomainChanged()": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SponsoredClaimFeesPaid(uint256,uint256,address)": EventFragment;
    "Withdrawal(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimFeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SponsoredClaimFeesPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface CampaignClaimedEventObject {
  campaignManager: string;
  campaignId: BigNumber;
  claimer: string;
  tokenAddress: string;
  amount: BigNumber;
}
export type CampaignClaimedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  CampaignClaimedEventObject
>;

export type CampaignClaimedEventFilter = TypedEventFilter<CampaignClaimedEvent>;

export interface CampaignCreatedEventObject {
  campaignManager: string;
  campaignId: BigNumber;
}
export type CampaignCreatedEvent = TypedEvent<
  [string, BigNumber],
  CampaignCreatedEventObject
>;

export type CampaignCreatedEventFilter = TypedEventFilter<CampaignCreatedEvent>;

export interface CampaignWithdrawnEventObject {
  campaignManager: string;
  campaignId: BigNumber;
}
export type CampaignWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  CampaignWithdrawnEventObject
>;

export type CampaignWithdrawnEventFilter =
  TypedEventFilter<CampaignWithdrawnEvent>;

export interface ClaimFeePaidEventObject {
  claimFee: BigNumber;
  claimFeePayer: string;
  claimFeeRecipient: string;
  campaignManager: string;
  campaignId: BigNumber;
  referrer: string;
}
export type ClaimFeePaidEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, string],
  ClaimFeePaidEventObject
>;

export type ClaimFeePaidEventFilter = TypedEventFilter<ClaimFeePaidEvent>;

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MetaTransactionExecutedEventObject {
  userAddress: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SponsoredClaimFeesPaidEventObject {
  sponsoredClaims: BigNumber;
  claimFee: BigNumber;
  claimFeeRecipient: string;
}
export type SponsoredClaimFeesPaidEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  SponsoredClaimFeesPaidEventObject
>;

export type SponsoredClaimFeesPaidEventFilter =
  TypedEventFilter<SponsoredClaimFeesPaidEvent>;

export interface WithdrawalEventObject {
  amount: BigNumber;
  treasury: string;
}
export type WithdrawalEvent = TypedEvent<
  [BigNumber, string],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface CampaignsNativeGaslessClaim extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CampaignsNativeGaslessClaimInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    campaigns(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenAddress: string;
        isInactive: number;
        isGasless: number;
        maxClaims: BigNumber;
        noOfClaims: BigNumber;
        amountPerClaim: BigNumber;
        maxSponsoredClaims: BigNumber;
        noOfSponsoredClaims: BigNumber;
      }
    >;

    claim(
      _campaignManager: PromiseOrValue<string>,
      _campaignId: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    createCampaign(
      _tokenAddress: PromiseOrValue<string>,
      _maxClaims: PromiseOrValue<BigNumberish>,
      _amountPerClaim: PromiseOrValue<BigNumberish>,
      _isGasless: PromiseOrValue<BigNumberish>,
      _maxSponsoredClaims: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    hasClaimed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseMaxSponsoredClaims(
      _campaignManager: PromiseOrValue<string>,
      _campaignId: PromiseOrValue<BigNumberish>,
      _additionalSponsoredClaims: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _trustedAddress: PromiseOrValue<string>,
      _claimFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolRewards(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimFee(
      _claimFee: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSponsoredClaimFee(
      _sponsoredClaimFee: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedAddress(
      _trustedAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    splitAndDepositRewards(
      _amount: PromiseOrValue<BigNumberish>,
      _platform: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    splitRewards(
      _amount: PromiseOrValue<BigNumberish>,
      _platform: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    sponsoredClaimFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaimFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    withdrawCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTotalClaimFees(
      _treasury: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  campaigns(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      tokenAddress: string;
      isInactive: number;
      isGasless: number;
      maxClaims: BigNumber;
      noOfClaims: BigNumber;
      amountPerClaim: BigNumber;
      maxSponsoredClaims: BigNumber;
      noOfSponsoredClaims: BigNumber;
    }
  >;

  claim(
    _campaignManager: PromiseOrValue<string>,
    _campaignId: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    v: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFee(overrides?: CallOverrides): Promise<BigNumber>;

  createCampaign(
    _tokenAddress: PromiseOrValue<string>,
    _maxClaims: PromiseOrValue<BigNumberish>,
    _amountPerClaim: PromiseOrValue<BigNumberish>,
    _isGasless: PromiseOrValue<BigNumberish>,
    _maxSponsoredClaims: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  executeMetaTransaction(
    userAddress: PromiseOrValue<string>,
    functionSignature: PromiseOrValue<BytesLike>,
    sigR: PromiseOrValue<BytesLike>,
    sigS: PromiseOrValue<BytesLike>,
    sigV: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNonce(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasClaimed(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseMaxSponsoredClaims(
    _campaignManager: PromiseOrValue<string>,
    _campaignId: PromiseOrValue<BigNumberish>,
    _additionalSponsoredClaims: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _trustedAddress: PromiseOrValue<string>,
    _claimFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolRewards(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimFee(
    _claimFee: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSponsoredClaimFee(
    _sponsoredClaimFee: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedAddress(
    _trustedAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  splitAndDepositRewards(
    _amount: PromiseOrValue<BigNumberish>,
    _platform: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    _referrer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  splitRewards(
    _amount: PromiseOrValue<BigNumberish>,
    _platform: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    _referrer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  sponsoredClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaimFees(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  withdrawCampaign(
    _campaignId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTotalClaimFees(
    _treasury: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    campaigns(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenAddress: string;
        isInactive: number;
        isGasless: number;
        maxClaims: BigNumber;
        noOfClaims: BigNumber;
        amountPerClaim: BigNumber;
        maxSponsoredClaims: BigNumber;
        noOfSponsoredClaims: BigNumber;
      }
    >;

    claim(
      _campaignManager: PromiseOrValue<string>,
      _campaignId: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFee(overrides?: CallOverrides): Promise<BigNumber>;

    createCampaign(
      _tokenAddress: PromiseOrValue<string>,
      _maxClaims: PromiseOrValue<BigNumberish>,
      _amountPerClaim: PromiseOrValue<BigNumberish>,
      _isGasless: PromiseOrValue<BigNumberish>,
      _maxSponsoredClaims: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaimed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseMaxSponsoredClaims(
      _campaignManager: PromiseOrValue<string>,
      _campaignId: PromiseOrValue<BigNumberish>,
      _additionalSponsoredClaims: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _trustedAddress: PromiseOrValue<string>,
      _claimFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolRewards(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setClaimFee(
      _claimFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSponsoredClaimFee(
      _sponsoredClaimFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedAddress(
      _trustedAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    splitAndDepositRewards(
      _amount: PromiseOrValue<BigNumberish>,
      _platform: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    splitRewards(
      _amount: PromiseOrValue<BigNumberish>,
      _platform: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    sponsoredClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimFees(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    withdrawCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTotalClaimFees(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CampaignClaimed(address,uint256,address,address,uint256)"(
      campaignManager?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      tokenAddress?: null,
      amount?: null
    ): CampaignClaimedEventFilter;
    CampaignClaimed(
      campaignManager?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      tokenAddress?: null,
      amount?: null
    ): CampaignClaimedEventFilter;

    "CampaignCreated(address,uint256)"(
      campaignManager?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null
    ): CampaignCreatedEventFilter;
    CampaignCreated(
      campaignManager?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null
    ): CampaignCreatedEventFilter;

    "CampaignWithdrawn(address,uint256)"(
      campaignManager?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null
    ): CampaignWithdrawnEventFilter;
    CampaignWithdrawn(
      campaignManager?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null
    ): CampaignWithdrawnEventFilter;

    "ClaimFeePaid(uint256,address,address,address,uint256,address)"(
      claimFee?: null,
      claimFeePayer?: null,
      claimFeeRecipient?: null,
      campaignManager?: null,
      campaignId?: null,
      referrer?: null
    ): ClaimFeePaidEventFilter;
    ClaimFeePaid(
      claimFee?: null,
      claimFeePayer?: null,
      claimFeeRecipient?: null,
      campaignManager?: null,
      campaignId?: null,
      referrer?: null
    ): ClaimFeePaidEventFilter;

    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SponsoredClaimFeesPaid(uint256,uint256,address)"(
      sponsoredClaims?: null,
      claimFee?: null,
      claimFeeRecipient?: null
    ): SponsoredClaimFeesPaidEventFilter;
    SponsoredClaimFeesPaid(
      sponsoredClaims?: null,
      claimFee?: null,
      claimFeeRecipient?: null
    ): SponsoredClaimFeesPaidEventFilter;

    "Withdrawal(uint256,address)"(
      amount?: null,
      treasury?: PromiseOrValue<string> | null
    ): WithdrawalEventFilter;
    Withdrawal(
      amount?: null,
      treasury?: PromiseOrValue<string> | null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    campaigns(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _campaignManager: PromiseOrValue<string>,
      _campaignId: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFee(overrides?: CallOverrides): Promise<BigNumber>;

    createCampaign(
      _tokenAddress: PromiseOrValue<string>,
      _maxClaims: PromiseOrValue<BigNumberish>,
      _amountPerClaim: PromiseOrValue<BigNumberish>,
      _isGasless: PromiseOrValue<BigNumberish>,
      _maxSponsoredClaims: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaimed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseMaxSponsoredClaims(
      _campaignManager: PromiseOrValue<string>,
      _campaignId: PromiseOrValue<BigNumberish>,
      _additionalSponsoredClaims: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _trustedAddress: PromiseOrValue<string>,
      _claimFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRewards(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimFee(
      _claimFee: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSponsoredClaimFee(
      _sponsoredClaimFee: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedAddress(
      _trustedAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    splitAndDepositRewards(
      _amount: PromiseOrValue<BigNumberish>,
      _platform: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    splitRewards(
      _amount: PromiseOrValue<BigNumberish>,
      _platform: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sponsoredClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimFees(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTotalClaimFees(
      _treasury: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    campaigns(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _campaignManager: PromiseOrValue<string>,
      _campaignId: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCampaign(
      _tokenAddress: PromiseOrValue<string>,
      _maxClaims: PromiseOrValue<BigNumberish>,
      _amountPerClaim: PromiseOrValue<BigNumberish>,
      _isGasless: PromiseOrValue<BigNumberish>,
      _maxSponsoredClaims: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaimed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseMaxSponsoredClaims(
      _campaignManager: PromiseOrValue<string>,
      _campaignId: PromiseOrValue<BigNumberish>,
      _additionalSponsoredClaims: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _trustedAddress: PromiseOrValue<string>,
      _claimFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimFee(
      _claimFee: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSponsoredClaimFee(
      _sponsoredClaimFee: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedAddress(
      _trustedAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    splitAndDepositRewards(
      _amount: PromiseOrValue<BigNumberish>,
      _platform: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    splitRewards(
      _amount: PromiseOrValue<BigNumberish>,
      _platform: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sponsoredClaimFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTotalClaimFees(
      _treasury: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
